plot(y_tmp ~ x_tmp,
xlab = '主フェレ角[rad]',
ylab = '経路変化分の分散',
main = sprintf('中心周波数=%d kHz',frq2[i,1])
)
abline(lm(y_tmp ~ x_tmp))
result <- lm(y_tmp ~ x_tmp)
conf.interval <- predict(result, interval="confidence", level = 0.95)
conf.predict <- predict(result, interval="prediction", level = 0.95)
lines(x_tmp[order(x_tmp)], conf.interval[order(x_tmp), 2], col = "blue")
lines(x_tmp[order(x_tmp)], conf.interval[order(x_tmp), 3], col = "darkgreen")
lines(x_tmp[order(x_tmp)], conf.predict[order(x_tmp), 2], col = "blue",lty=2)
lines(x_tmp[order(x_tmp)], conf.predict[order(x_tmp), 3], col = "darkgreen",lty=2)
summary(result)
i=5
x_tmp <- t(refractive_dispersion[i,])
y_tmp <- t(varDiff_Point[i,])
plot(y_tmp ~ x_tmp,
xlab = '主フェレ角[rad]',
ylab = '経路変化分の分散',
main = sprintf('中心周波数=%d kHz',frq2[i,1])
)
abline(lm(y_tmp ~ x_tmp))
result <- lm(y_tmp ~ x_tmp)
conf.interval <- predict(result, interval="confidence", level = 0.95)
conf.predict <- predict(result, interval="prediction", level = 0.95)
lines(x_tmp[order(x_tmp)], conf.interval[order(x_tmp), 2], col = "blue")
lines(x_tmp[order(x_tmp)], conf.interval[order(x_tmp), 3], col = "darkgreen")
lines(x_tmp[order(x_tmp)], conf.predict[order(x_tmp), 2], col = "blue",lty=2)
lines(x_tmp[order(x_tmp)], conf.predict[order(x_tmp), 3], col = "darkgreen",lty=2)
summary(result)
i=6
x_tmp <- t(refractive_dispersion[i,])
y_tmp <- t(varDiff_Point[i,])
plot(y_tmp ~ x_tmp,
xlab = '主フェレ角[rad]',
ylab = '経路変化分の分散',
main = sprintf('中心周波数=%d kHz',frq2[i,1])
)
abline(lm(y_tmp ~ x_tmp))
result <- lm(y_tmp ~ x_tmp)
conf.interval <- predict(result, interval="confidence", level = 0.95)
conf.predict <- predict(result, interval="prediction", level = 0.95)
lines(x_tmp[order(x_tmp)], conf.interval[order(x_tmp), 2], col = "blue")
lines(x_tmp[order(x_tmp)], conf.interval[order(x_tmp), 3], col = "darkgreen")
lines(x_tmp[order(x_tmp)], conf.predict[order(x_tmp), 2], col = "blue",lty=2)
lines(x_tmp[order(x_tmp)], conf.predict[order(x_tmp), 3], col = "darkgreen",lty=2)
summary(result)
View(frq)
View(frq2)
View(frq2)
View(frq)
View(frq)
read.csv(file = 'data/v_error.csv',header = FALSE)
read.csv(file = 'data/v_error.csv',header = FALSE);
v_error <-read.csv(file = 'data/v_error.csv',header = FALSE);
View(v_error)
save.image("//azlab-fs01/東研究室/個人work/竹内(ひ)/experiments/2018_09_13_analyzeRealisticModel_R_multiFreq/data/workspace.RData")
source('//azlab-fs01/東研究室/個人work/竹内(ひ)/experiments/2018_09_13_analyzeRealisticModel_R_multiFreq/2018_09_13_analyzeRealisticModel_R_multiFreq.R', echo=TRUE)
source('//azlab-fs01/東研究室/個人work/竹内(ひ)/experiments/2018_09_13_analyzeRealisticModel_R_multiFreq/2018_09_13_analyzeRealisticModel_R_multiFreq.R', echo=TRUE)
#残差プロット
windows()
par(ps=18,mex=1.2,pty='s')
plot(result,which=1)
savePlot(filename = "//Azlab-fs01/東研究室/個人work/竹内(ひ)/result/2018_09_13_analyzeRealisticModel_R_multiFreq/residuals_fitted_500kHz.png",type="png")
dev.off()
windows()
par(ps=18,mex=1.2,pty='s')
plot(result,which=2)
savePlot(filename = "//Azlab-fs01/東研究室/個人work/竹内(ひ)/result/2018_09_13_analyzeRealisticModel_R_multiFreq/normal_q-q_500kHz.png",type="png")
dev.off()
#平均音速値推定誤差
windows()
par(mfrow=c(2,3),ps=18,mex=1.2,pty='s')
for (i in 1:6) {
hist(v_error[i,],breaks = 'Scott',freq = FALSE,
main = sprintf('中心周波数=%d MHz',frq[i,1]/1e3),
xlab='平均音速推定誤差')
}
savePlot(filename = "//Azlab-fs01/東研究室/個人work/竹内(ひ)/result/2018_09_13_analyzeRealisticModel_R_multiFreq/v_estimation_errors.png",type="png")
dev.off()
load(file = "data/workspace.RData")
windows()
r_single_reg_multifrq <- matrix(nrow = 6,ncol = 1)
par(mfrow=c(2,3),ps=18,mex=1.2,pty='s')
for (i in 1:6) {
x_tmp = t(rate_EMCLs[i,])
y_tmp = t(aveSOS2[i,])
plot(y_tmp ~ x_tmp,
xlab = 'EMCL[%]',
ylab = '平均音速値[m/s]',
main = sprintf('中心周波数=%d MHz',frq[i,1]/1e3))
abline(lm(y_tmp ~ x_tmp))
result <- lm(y_tmp ~ x_tmp)
conf.interval <- predict(result, interval="confidence", level = 0.95)
conf.predict <- predict(result, interval="prediction", level = 0.95)
lines(x_tmp[order(x_tmp)], conf.interval[order(x_tmp), 2], col = "blue")
lines(x_tmp[order(x_tmp)], conf.interval[order(x_tmp), 3], col = "darkgreen")
lines(x_tmp[order(x_tmp)], conf.predict[order(x_tmp), 2], col = "blue",lty=2)
lines(x_tmp[order(x_tmp)], conf.predict[order(x_tmp), 3], col = "darkgreen",lty=2)
}
savePlot(filename = "//Azlab-fs01/東研究室/個人work/竹内(ひ)/result/2018_09_13_analyzeRealisticModel_R_multiFreq/linear_regression_multi_frq.png",type="png")
dev.off()
#残差プロット
windows()
par(ps=18,mex=1.2,pty='s')
plot(result,which=1)
savePlot(filename = "//Azlab-fs01/東研究室/個人work/竹内(ひ)/result/2018_09_13_analyzeRealisticModel_R_multiFreq/residuals_fitted_500kHz.png",type="png")
dev.off()
windows()
par(ps=18,mex=1.2,pty='s')
plot(result,which=2)
savePlot(filename = "//Azlab-fs01/東研究室/個人work/竹内(ひ)/result/2018_09_13_analyzeRealisticModel_R_multiFreq/normal_q-q_500kHz.png",type="png")
dev.off()
#平均音速値推定誤差
windows()
par(mfrow=c(2,3),ps=18,mex=1.2,pty='s')
for (i in 1:6) {
hist(v_error[i,],breaks = 'Scott',freq = FALSE,
main = sprintf('中心周波数=%d MHz',frq[i,1]/1e3),
xlab='平均音速推定誤差')
}
savePlot(filename = "//Azlab-fs01/東研究室/個人work/竹内(ひ)/result/2018_09_13_analyzeRealisticModel_R_multiFreq/v_estimation_errors.png",type="png")
dev.off()
hist(v_error[i,],breaks = 'Scott',freq = FALSE,
main = sprintf('中心周波数=%d MHz',frq[i,1]/1e3),
xlab='平均音速推定誤差')
windows()
par(mfrow=c(2,3),ps=18,mex=1.2,pty='s')
for (i in 1:6) {
hist(t(v_error[i,]),breaks = 'Scott',freq = FALSE,
main = sprintf('中心周波数=%d MHz',frq[i,1]/1e3),
xlab='平均音速推定誤差')
}
savePlot(filename = "//Azlab-fs01/東研究室/個人work/竹内(ひ)/result/2018_09_13_analyzeRealisticModel_R_multiFreq/v_estimation_errors.png",type="png")
dev.off()
t(v_error[i,])
t(v_error[,i])
View(v_error)
#平均音速値推定誤差
windows()
par(mfrow=c(2,3),ps=18,mex=1.2,pty='s')
for (i in 1:6) {
hist(t(v_error[,i]),breaks = 'Scott',freq = FALSE,
main = sprintf('中心周波数=%d MHz',frq[i,1]/1e3),
xlab='平均音速推定誤差')
}
savePlot(filename = "//Azlab-fs01/東研究室/個人work/竹内(ひ)/result/2018_09_13_analyzeRealisticModel_R_multiFreq/v_estimation_errors.png",type="png")
dev.off()
#平均音速値推定誤差
windows()
par(mfrow=c(2,3),ps=18,mex=1.2,pty='s')
for (i in 1:6) {
hist(t(v_error[,i]),breaks = 'Scott',freq = FALSE,
main = sprintf('中心周波数=%d MHz',frq[i,1]/1e3),
xlab='平均音速推定誤差',xlim=c(-60,60),ylim=c(0,0.12))
}
savePlot(filename = "//Azlab-fs01/東研究室/個人work/竹内(ひ)/result/2018_09_13_analyzeRealisticModel_R_multiFreq/v_estimation_errors.png",type="png")
dev.off()
windows()
par(mfrow=c(2,3),ps=18,mex=1.2,pty='s',family = "HiraKakuProN-W3")
for (i in 1:6) {
hist(t(v_error[,i]),breaks = 'Scott',freq = FALSE,
main = sprintf('中心周波数=%d MHz',frq[i,1]/1e3),
xlab='平均音速推定誤差',xlim=c(-60,60),ylim=c(0,0.12))
}
savePlot(filename = "//Azlab-fs01/東研究室/個人work/竹内(ひ)/result/2018_09_13_analyzeRealisticModel_R_multiFreq/v_estimation_errors.png",type="png")
dev.off()
#平均音速値推定誤差
windows()
par(mfrow=c(2,3),ps=18,mex=1.2,pty='s')
for (i in 1:6) {
hist(t(v_error[,i]),breaks = 'Scott',freq = FALSE,
main = sprintf('中心周波数=%d MHz',frq[i,1]/1e3),
xlab='平均音速推定誤差',xlim=c(-60,60),ylim=c(0,0.12))
}
savePlot(filename = "//Azlab-fs01/東研究室/個人work/竹内(ひ)/result/2018_09_13_analyzeRealisticModel_R_multiFreq/v_estimation_errors.png",type="png")
dev.off()
plot(result,which=1)
plot(result,which=2)
par(ps=18,mex=1.2,pty='s')
plot(t(v_error[,1]),which=2)
par(ps=18,mex=1.2,pty='s')
plot(t(v_error[1,]),which=2)
View(result)
#平均音速値推定誤差
windows()
par(mfrow=c(2,3),ps=18,mex=1.2,pty='s')
for (i in 1:6) {
hist(t(v_error[,i]),breaks = 'Scott',freq = FALSE,
main = sprintf('中心周波数=%d MHz',frq[i,1]/1e3),
xlab='平均音速推定誤差',xlim=c(-60,60),ylim=c(0,0.12))
m <- mean(t(v_error[,i]))	# 標本平均列の平均 　
s <- sd(t(v_error[,i]))	# 標本平均列の標準偏差 　
curve(dnorm(t(v_error[,i]), m, s), 0, 1, add=TRUE, col="red")
}
savePlot(filename = "//Azlab-fs01/東研究室/個人work/竹内(ひ)/result/2018_09_13_analyzeRealisticModel_R_multiFreq/v_estimation_errors.png",type="png")
dev.off()
a <- t(v_error[,i])
#平均音速値推定誤差
windows()
par(mfrow=c(2,3),ps=18,mex=1.2,pty='s')
for (i in 1:6) {
a <- t(v_error[,i])
hist(a,breaks = 'Scott',freq = FALSE,
main = sprintf('中心周波数=%d MHz',frq[i,1]/1e3),
xlab='平均音速推定誤差',xlim=c(-60,60),ylim=c(0,0.12))
m <- mean(a)	# 標本平均列の平均 　
s <- sd(a)	# 標本平均列の標準偏差 　
curve(dnorm(a, m, s), 0, 1, add=TRUE, col="red")
}
savePlot(filename = "//Azlab-fs01/東研究室/個人work/竹内(ひ)/result/2018_09_13_analyzeRealisticModel_R_multiFreq/v_estimation_errors.png",type="png")
dev.off()
N <- 10000	# 乱数列の長さ 　
n <- 2	# 標本平均のサイズ 　
u <- matrix(data=runif(n*N), ncol=n)	# N×n の一様乱数行列 　
um <- apply(u, 1, mean)
#平均音速値推定誤差
windows()
par(mfrow=c(2,3),ps=18,mex=1.2,pty='s')
for (i in 1:6) {
a <- t(v_error[,i])
hist(a,breaks = 'Scott',freq = FALSE,
main = sprintf('中心周波数=%d MHz',frq[i,1]/1e3),
xlab='平均音速推定誤差',xlim=c(-60,60),ylim=c(0,0.12))
# m <- mean(a)	# 標本平均列の平均 　
# s <- sd(a)	# 標本平均列の標準偏差 　
# curve(dnorm(a, m, s), 0, 1, add=TRUE, col="red")
}
savePlot(filename = "//Azlab-fs01/東研究室/個人work/竹内(ひ)/result/2018_09_13_analyzeRealisticModel_R_multiFreq/v_estimation_errors.png",type="png")
dev.off()
variance <- function(x) var(x)*(length(x)-1)/length(x)
mean_v_error <- matrix(nrow = 6,ncol = 1)
for (i in 1:6) {
mean_v_error[i,1] <- mean(v_error[,i])
}
View(mean_v_error)
std_v_error <- matrix(nrow = 6,ncol = 1)
mean_v_error <- matrix(nrow = 6,ncol = 1)
std_v_error <- matrix(nrow = 6,ncol = 1)
for (i in 1:6) {
mean_v_error[i,1] <- mean(v_error[,i])
std_v_error[i,1] <- sqrt(var(v_error[,i]))*(length(v_error[,i])-1)/(length(v_error[,i]))
}
View(std_v_error)
t.test(v_error)
t.test(v_error[,1])
t.test(v_error[,2])
t.test(v_error[,3])
t.test(v_error[,4])
t.test(v_error[,5])
t.test(v_error[,6])]
t.test(v_error[,6])
save.image("//azlab-fs01/東研究室/個人work/竹内(ひ)/experiments/2018_09_13_analyzeRealisticModel_R_multiFreq/data/workspace.RData")
windows()
r_single_reg_multifrq <- matrix(nrow = 6,ncol = 1)
par(mfrow=c(2,3),ps=18,mex=1.2,pty='s')
for (i in 1:6) {
x_tmp = t(rate_EMCLs[i,])
y_tmp = t(aveSOS2[i,])
plot(y_tmp ~ x_tmp,
xlab = 'EMCL[%]',
ylab = '平均音速値[m/s]',
main = sprintf('中心周波数=%d MHz',frq[i,1]/1e3),
ylim = c(1565, 1525))
abline(lm(y_tmp ~ x_tmp))
result <- lm(y_tmp ~ x_tmp)
conf.interval <- predict(result, interval="confidence", level = 0.95)
conf.predict <- predict(result, interval="prediction", level = 0.95)
lines(x_tmp[order(x_tmp)], conf.interval[order(x_tmp), 2], col = "blue")
lines(x_tmp[order(x_tmp)], conf.interval[order(x_tmp), 3], col = "darkgreen")
lines(x_tmp[order(x_tmp)], conf.predict[order(x_tmp), 2], col = "blue",lty=2)
lines(x_tmp[order(x_tmp)], conf.predict[order(x_tmp), 3], col = "darkgreen",lty=2)
}
savePlot(filename = "//Azlab-fs01/東研究室/個人work/竹内(ひ)/result/2018_09_13_analyzeRealisticModel_R_multiFreq/linear_regression_multi_frq.png",type="png")
dev.off()
View(u)
windows()
residuals_multifrq <- matrix(nrow = 6,ncol = 25)
par(mfrow=c(2,3),ps=18,mex=1.2,pty='s')
for (i in 1:6) {
x_tmp = t(rate_EMCLs[i,])
y_tmp = t(aveSOS2[i,])
result <- lm(y_tmp ~ x_tmp)
for (j in 1:25){
residuals_multifrq[i,j] <- as.vector(result$residuals[j])
}
hist(residuals_multifrq[i,],breaks = 'Scott',freq = FALSE,
xlab = '残差[m/s]',
main = sprintf('中心周波数=%d MHz',frq[i,1]/1e3)
)
}
View(residuals_multifrq)
windows()
residuals_multifrq <- matrix(nrow = 6,ncol = 25)
par(mfrow=c(2,3),ps=18,mex=1.2,pty='s')
for (i in 1:6) {
x_tmp = t(rate_EMCLs[i,])
y_tmp = t(aveSOS2[i,])
result <- lm(y_tmp ~ x_tmp)
for (j in 1:25){
residuals_multifrq[i,j] <- as.vector(result$residuals[j])
}
hist(residuals_multifrq[i,],breaks = 8,freq = FALSE,
xlab = '残差[m/s]',
main = sprintf('中心周波数=%d MHz',frq[i,1]/1e3)
)
}
savePlot(filename = "//Azlab-fs01/東研究室/個人work/竹内(ひ)/result/2018_09_13_analyzeRealisticModel_R_multiFreq/residuals_multi_frq.png",type="png")
dev.off()
windows()
residuals_multifrq <- matrix(nrow = 6,ncol = 25)
par(mfrow=c(2,3),ps=18,mex=1.2,pty='s')
for (i in 1:6) {
x_tmp = t(rate_EMCLs[i,])
y_tmp = t(aveSOS2[i,])
result <- lm(y_tmp ~ x_tmp)
for (j in 1:25){
residuals_multifrq[i,j] <- as.vector(result$residuals[j])
}
hist(residuals_multifrq[i,],freq = FALSE,
xlab = '残差[m/s]',
main = sprintf('中心周波数=%d MHz',frq[i,1]/1e3)
)
}
savePlot(filename = "//Azlab-fs01/東研究室/個人work/竹内(ひ)/result/2018_09_13_analyzeRealisticModel_R_multiFreq/residuals_multi_frq.png",type="png")
dev.off()
windows()
residuals_multifrq <- matrix(nrow = 6,ncol = 25)
par(mfrow=c(2,3),ps=18,mex=1.2,pty='s')
for (i in 1:6) {
x_tmp = t(rate_EMCLs[i,])
y_tmp = t(aveSOS2[i,])
result <- lm(y_tmp ~ x_tmp)
for (j in 1:25){
residuals_multifrq[i,j] <- as.vector(result$residuals[j])
}
hist(residuals_multifrq[i,],breaks ='Sturges',freq = FALSE,
xlab = '残差[m/s]',
main = sprintf('中心周波数=%d MHz',frq[i,1]/1e3)
)
}
savePlot(filename = "//Azlab-fs01/東研究室/個人work/竹内(ひ)/result/2018_09_13_analyzeRealisticModel_R_multiFreq/residuals_multi_frq.png",type="png")
dev.off()
windows()
residuals_multifrq <- matrix(nrow = 6,ncol = 25)
par(mfrow=c(2,3),ps=18,mex=1.2,pty='s')
for (i in 1:6) {
x_tmp = t(rate_EMCLs[i,])
y_tmp = t(aveSOS2[i,])
result <- lm(y_tmp ~ x_tmp)
for (j in 1:25){
residuals_multifrq[i,j] <- as.vector(result$residuals[j])
}
hist(residuals_multifrq[i,],breaks =10,freq = FALSE,
xlab = '残差[m/s]',
main = sprintf('中心周波数=%d MHz',frq[i,1]/1e3)
)
}
savePlot(filename = "//Azlab-fs01/東研究室/個人work/竹内(ひ)/result/2018_09_13_analyzeRealisticModel_R_multiFreq/residuals_multi_frq.png",type="png")
dev.off()
#残差ヒストグラム表示
windows()
residuals_multifrq <- matrix(nrow = 6,ncol = 25)
par(mfrow=c(2,3),ps=18,mex=1.2,pty='s')
for (i in 1:6) {
x_tmp = t(rate_EMCLs[i,])
y_tmp = t(aveSOS2[i,])
result <- lm(y_tmp ~ x_tmp)
for (j in 1:25){
residuals_multifrq[i,j] <- as.vector(result$residuals[j])
}
hist(residuals_multifrq[i,],breaks =10,freq = FALSE,
xlab = '残差[m/s]',
main = sprintf('中心周波数=%d MHz',frq[i,1]/1e3),
xlim = c(-2.5, 2.5)
)
}
savePlot(filename = "//Azlab-fs01/東研究室/個人work/竹内(ひ)/result/2018_09_13_analyzeRealisticModel_R_multiFreq/residuals_multi_frq.png",type="png")
dev.off()
windows()
residuals_multifrq <- matrix(nrow = 6,ncol = 25)
par(mfrow=c(2,3),ps=18,mex=1.2,pty='s')
for (i in 1:6) {
x_tmp = t(rate_EMCLs[i,])
y_tmp = t(aveSOS2[i,])
result <- lm(y_tmp ~ x_tmp)
for (j in 1:25){
residuals_multifrq[i,j] <- as.vector(result$residuals[j])
}
hist(residuals_multifrq[i,],breaks ='Sturges',freq = FALSE,
xlab = '残差[m/s]',
main = sprintf('中心周波数=%d MHz',frq[i,1]/1e3),
xlim = c(-2.5, 2.5),
ylim = c(0,1.0)
)
}
savePlot(filename = "//Azlab-fs01/東研究室/個人work/竹内(ひ)/result/2018_09_13_analyzeRealisticModel_R_multiFreq/residuals_multi_frq.png",type="png")
dev.off()
source('Z:/experiments/2018_10_09_again_analysis_with_correct_conditions/2018_09_13_analyzeRealisticModel_R_multiFreq/2018_10_15_make_variances.R', echo=TRUE)
source('Z:/experiments/2018_10_09_again_analysis_with_correct_conditions/2018_09_13_analyzeRealisticModel_R_multiFreq/2018_10_15_make_variances.R', echo=TRUE)
save.image("Z:/experiments/2018_09_13_analyzeRealisticModel_R_multiFreq/data/workspace.RData")
save.image("Z:/experiments/2018_10_09_again_analysis_with_correct_conditions/2018_09_13_analyzeRealisticModel_R_multiFreq/data/workspace.RData")
setwd("Z:/experiments/2018_10_09_again_analysis_with_correct_conditions/2018_09_13_analyzeRealisticModel_R_multiFreq")
source('Z:/experiments/2018_10_09_again_analysis_with_correct_conditions/2018_09_13_analyzeRealisticModel_R_multiFreq/2018_10_15_make_variances.R', echo=TRUE)
source('Z:/experiments/2018_10_09_again_analysis_with_correct_conditions/2018_09_13_analyzeRealisticModel_R_multiFreq/2018_10_15_make_variances.R', echo=TRUE)
windows()
r_single_reg_multifrq <- matrix(nrow = 6,ncol = 1)
par(mfrow=c(2,3),ps=18,mex=1.2,pty='s')
for (i in 1:6) {
x_tmp = t(rate_EMCLs[i,])
y_tmp = t(aveSOS2[i,])
plot(y_tmp ~ x_tmp,
xlab = 'EMCL[%]',
ylab = '平均音速値[m/s]',
main = sprintf('中心周波数=%d MHz',frq[i,1]/1e3),
ylim = c(1525, 1565))
abline(lm(y_tmp ~ x_tmp))
result <- lm(y_tmp ~ x_tmp)
conf.interval <- predict(result, interval="confidence", level = 0.95)
conf.predict <- predict(result, interval="prediction", level = 0.95)
lines(x_tmp[order(x_tmp)], conf.interval[order(x_tmp), 2], col = "blue")
lines(x_tmp[order(x_tmp)], conf.interval[order(x_tmp), 3], col = "darkgreen")
lines(x_tmp[order(x_tmp)], conf.predict[order(x_tmp), 2], col = "blue",lty=2)
lines(x_tmp[order(x_tmp)], conf.predict[order(x_tmp), 3], col = "darkgreen",lty=2)
}
savePlot(filename = "//Azlab-fs01/東研究室/個人work/竹内(ひ)/result/2018_09_13_analyzeRealisticModel_R_multiFreq/linear_regression_multi_frq.png",type="png")
dev.off()
i<1
i<-1
x_tmp = t(rate_EMCLs[i,])
y_tmp = t(aveSOS2[i,])
plot(y_tmp ~ x_tmp,
xlab = 'EMCL[%]',
ylab = '平均音速値[m/s]',
main = sprintf('中心周波数=%d MHz',frq[i,1]/1e3),
ylim = c(1525, 1565))
abline(lm(y_tmp ~ x_tmp))
result <- lm(y_tmp ~ x_tmp)
summary(result)
# 残差平方和と周波数のプロット
windows()
par(ps=20,mex=1.5)
plot(RSS ~ frq2[,1],
xlab = '周波数 [kHz]',
ylab = '残差平方和　　[(m/s)^2]',
log = 'x',
type = 'o',
ylim = c(0 ,30))
savePlot(filename = "//Azlab-fs01/東研究室/個人work/竹内(ひ)/result/2018_09_13_analyzeRealisticModel_R_multiFreq/RSS.png",type="png")
dev.off()
# 残差平方和算出
RSS <- numeric(6)
for (i in 1:6) {
x_tmp = t(rate_EMCLs[i,])
y_tmp = t(aveSOS2[i,])
lm_tmp = lm(y_tmp ~ x_tmp)
RSS[i]<- deviance(lm_tmp)
}
frq2 <- frq/1e3
# 残差平方和と周波数のプロット
windows()
par(ps=20,mex=1.5)
plot(RSS ~ frq2[,1],
xlab = '周波数 [kHz]',
ylab = '残差平方和　　[(m/s)^2]',
log = 'x',
type = 'o',
ylim = c(0 ,30))
savePlot(filename = "//Azlab-fs01/東研究室/個人work/竹内(ひ)/result/2018_09_13_analyzeRealisticModel_R_multiFreq/RSS.png",type="png")
dev.off()
# 残差平方和算出
RSS <- numeric(6)
for (i in 1:6) {
x_tmp = t(rate_EMCLs[i,])
y_tmp = t(aveSOS2[i,])
lm_tmp = lm(y_tmp ~ x_tmp)
RSS[i]<- deviance(lm_tmp)
}
frq2 <- frq/1e3
# 残差平方和と周波数のプロット
windows()
par(ps=20,mex=1.5)
plot(RSS ~ frq2[,1],
xlab = '周波数 [kHz]',
ylab = '残差平方和　　[(m/s)^2]',
log = 'x',
type = 'o',
ylim = c(0 ,30))
savePlot(filename = "//Azlab-fs01/東研究室/個人work/竹内(ひ)/result/2018_10_09_again_analysis_with_correct_conditions/2018_09_13_analyzeRealisticModel_R_multiFreq/RSS.png",type="png")
dev.off()
load("//azlab-fs01/東研究室/個人work/竹内(ひ)/experiments/2018_09_13_analyzeRealisticModel_R_multiFreq/data/workspace.RData")
# 残差平方和算出
RSS <- numeric(6)
for (i in 1:6) {
x_tmp = t(rate_EMCLs[i,])
y_tmp = t(aveSOS2[i,])
lm_tmp = lm(y_tmp ~ x_tmp)
RSS[i]<- deviance(lm_tmp)
}
frq2 <- frq/1e3
# 残差平方和と周波数のプロット
windows()
par(ps=20,mex=1.5)
plot(RSS ~ frq2[,1],
xlab = '周波数 [kHz]',
ylab = '残差平方和　　[(m/s)^2]',
log = 'x',
type = 'o',
ylim = c(0 ,30))
savePlot(filename = "//Azlab-fs01/東研究室/個人work/竹内(ひ)/result/2018_10_09_again_analysis_with_correct_conditions/2018_09_13_analyzeRealisticModel_R_multiFreq/RSS.png",type="png")
dev.off()
